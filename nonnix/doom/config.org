#+TITLE: doom literate config :3
#+AUTHOR: saturnalia

* Table of Contents :toc:
- [[#fixing-small-annoyances][Fixing small annoyances]]
- [[#general-behavioral-things][General behavioral things]]
- [[#setting-the-default-shell][Setting the default shell]]
- [[#basic-visual-tweaks][Basic visual tweaks]]
  - [[#configuring-fonts][Configuring fonts]]
  - [[#italicizing-comments][Italicizing comments]]
  - [[#rainbow-mode][Rainbow mode]]
- [[#configuring-the-tab-bar][Configuring the tab bar]]
- [[#fancying-up-the-splash-screen][Fancying up the splash screen]]
  - [[#adding-a-custom-image][Adding a custom image]]
  - [[#adding-custom-title][Adding custom title]]
  - [[#customizing-menu-items][Customizing menu items]]
- [[#keybinds][Keybinds]]
  - [[#misc-keybinds][Misc. keybinds]]
  - [[#dired-keybinds][Dired keybinds]]
  - [[#manpages][Manpages]]
- [[#org-mode][Org mode]]
  - [[#customizing-headers][Customizing headers]]
  - [[#org-agenda][Org agenda]]

* Fixing small annoyances
When using Deno, there are sometimes super annoying errors that don't really matter, this just disables them.
#+begin_src emacs-lisp
(setq warning-suppress-types '((lsp-mode)))
#+end_src

Making j and k based off of visual lines, huge thanks to Kiana for showing me this code, my dumbass could NOT have figured out how to do it on my own.
#+begin_src emacs-lisp
(setq evil-respect-visual-line-mode t)
(after! evil
  (evil-define-motion evil-next-line (count)
    :type line
    (let ((line-move-visual evil-respect-visual-line-mode))
      (evil-line-move (or count 1))))
  (evil-define-motion evil-previous-line (count)
    :type line
    (let ((line-move-visual evil-respect-visual-line-mode))
      (evil-line-move (- (or count 1))))))
#+end_src

* General behavioral things
Setting tab width, autosaving, and some other basic configuration for the behavior.
#+begin_src emacs-lisp
(setq confirm-kill-emacs nil ;; making emacs shut up so she doesnt beg for mercy when i try to kill her
      auto-save-default t
      auto-save-timeout 60
      c-basic-offset 2)

(setq-default tab-width 2
              c-basic-offset 2)
#+end_src

* Setting the default shell
Fish isn't a POSIX shell, so I set mine to bash.
#+begin_src emacs-lisp
(setq shell-file-name (executable-find "bash"))
(setq-default vterm-shell (executable-find "fish"))
#+end_src

* Basic visual tweaks
Setting my font, line numbers, and colorscheme.
#+begin_src emacs-lisp
(setq display-line-numbers-type t
      doom-theme 'catppuccin
      catppuccin-flavor 'mocha
      x-underline-at-descent-line t) ;; i have NO clue what this does, but i dont want to dare removing it
#+end_src
** Configuring fonts
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka NFM" :size 14))
#+end_src

#+RESULTS:
: #<font-spec nil nil Iosevka\ NFM nil nil nil nil nil 14 nil nil nil nil>

** Italicizing comments
#+begin_src emacs-lisp
(custom-set-faces!
  '(font-lock-comment-face :slant italic))
#+end_src

** Rainbow mode
I <3 LGBTQ+ rep <33
#+begin_src emacs-lisp
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda ()
    (when (not (memq major-mode
                     (list 'org-agenda-mode)))
      (rainbow-mode 1))))
(global-rainbow-mode 1)
#+end_src

* Configuring the tab bar
As someone who use Visual Studio Code for years, a solid tab bar is a MUST for me.
#+begin_src emacs-lisp
(setq centaur-tabs-style "bar"
      centaur-tabs-set-bar 'left
      centaur-tabs-set-close-button nil
      centaur-tabs-show-new-tab-button nil
      centaur-tabs-gray-out-icons 'buffer)
#+end_src

* Fancying up the splash screen
** Adding a custom image
#+begin_src emacs-lisp
(let ((alternatives '("emacs.png")))

        (setq fancy-splash-image
        (concat doom-private-dir "assets/"
                (nth (random (length alternatives)) alternatives))))
#+end_src

** Adding custom title
Also courtesy of (stolen from) Kiana.
#+begin_src emacs-lisp
(defface doom-dashboard-title
  '((t (:weight bold :inherit warning)))
  "Face used for the Doom emacs title on the dashboard."
  :group 'doom-dashboard)

(setq +doom-dashboard-banner-padding '(0 . 3))
(defvar +doom-dashboard-title-padding 3)

(defun doom-dashboard-widget-title ()
  (when (display-graphic-p)
    (insert (propertize
            (+doom-dashboard--center
             +doom-dashboard--width
             "[ D O O M  E M A C S ]")
            'face 'doom-dashboard-title)
           (make-string +doom-dashboard-title-padding ?\n))))
#+end_src

** Customizing menu items
I don't need basically half of the items that are in the list by default, so I remove them.
#+begin_src emacs-lisp
(assoc-delete-all "Reload last session" +doom-dashboard-menu-sections)
(assoc-delete-all "Jump to bookmark" +doom-dashboard-menu-sections)
(assoc-delete-all "Open documentation" +doom-dashboard-menu-sections)
(assoc-delete-all "Recently opened files" +doom-dashboard-menu-sections)

(setq +doom-dashboard-functions
      '(doom-dashboard-widget-banner
        doom-dashboard-widget-title
        doom-dashboard-widget-shortmenu))
#+end_src

* Keybinds
** Misc. keybinds
#+begin_src emacs-lisp
(map!
 "C-c M-x" #'kill-buffer
 "C-c C-x" #'kill-current-buffer
 "C-c C-n" "noh<CR>"
 "C-b" ":noh<CR>"

 (:map evil-normal-state-map
       "q" nil
       "C-q" #'evil-record-macro
       "U" #'evil-redo
       "<backtab>" #'centaur-tabs-backward
       "<tab>" #'centaur-tabs-forward)

 (:leader
  :desc "Dired"
  "d" #'dired
  :desc "Treemacs"
  "e" #'treemacs)

 (:map evil-motion-state-map
       "C-b" nil
       "<tab>" nil))
#+end_src

** Dired keybinds
#+begin_src emacs-lisp
 (map! (:map dired-mode-map
  :after dired
  :n "+" #'dired-create-empty-file
  :n "f" #'dired-create-directory
  :n "p" #'direc-up-directory

  :desc "Create directory"
  :n "C-f c" #'dired-create-directory
  :desc "Create file"
  :n "C-f n" #'dired-create-empty-file
  :desc "Delete file"
  :n "C-f d" #'dired-do-delete
  :desc "Go up a directory"
  :n "C-f u" #'dired-up-directory))
#+end_src

** Manpages
i like both standard emacs keychord type binds, but the leader key is nice too, so why not both!!
#+begin_src emacs-lisp
(map!
 (:leader
  :desc "Open manpage"
  "j" #'man
  :desc "Open womanpage"
  "k" #'woman)


 :desc "Open manpage"
 "C-c m" #'man
 :desc "Open womanpage"
 "C-c w" #'woman)
#+end_src

* Org mode
Like every other generic Emacs fan, I do, in fact, use org mode.
#+begin_src emacs-lisp
(after! org
  (setq org-directory "~/org"))
#+end_src

** Customizing headers
#+begin_src emacs-lisp
(after! org
  (setq org-ellipsis " â–¼ "
        org-superstar-headline-bullets-list '("â—‰" ("ðŸž›") "â—‹" "â–·")
        org-hide-emphasis-markers t))
#+end_src

** Org agenda
This time making an agenda will work... I hope.
#+begin_src emacs-lisp
(after! org
  (setq org-agenda-files
        '("~/Sync/agenda.org")))
#+end_src

*** Custom priority markers
The default priority markers are super ugly, so I'm changing them.
#+begin_src emacs-lisp
(after! org
(setq
 org-fancy-priorities-list '("[A]" "[B]" "[C]")
 org-priority-faces
 '((?A :foreground "#f38ba8" :weight bold)
   (?B :foreground "#a6e3a1" :weight bold)
   (?C :foreground "#cba6f7" :weight bold))))
#+end_src

*** Custom categories
I find that it's easier to use org agenda when it's broken down by priority rather than just a list of tasks.
Unfortunately, I watched a [[https://youtu.be/8BOiRmjw5aU][video from DistroTube]] to find out this stuff, and it was probably the lowest point in my life.
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("A" "Top priority tasks"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority tasks:")))
          (tags "PRIORITY=\"B\""
                 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                  (org-agenda-overriding-header "Medium-priority tasks:")))
          (tags "PRIORITY=\"C\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Low-priority tasks:")))
          (agenda "")
          (alltodo "")))))
#+end_src

